Automate The Boring Stuff With Python/Udemy course

Lesson 3: Functions

import MODULE

MODULE.SUBFUNCTION()

from MODULE import * (imports all from MODULE)
can now call all as SUBFUNCTION(), not recommended

sys.exit() <-finishes program early 

Third Party Modules - using PIP
see automatetheboringstuff.com/appendixa
-may need to install actual module library in specific folder
-pyperclip module has copy/paste to clipboard function.

pp61-69 Your Own Functions
# can end a print statment with a specific char sequence (, end = "thing")
# can also do a sperator sequence (, sep='thing')

access a global variable in a local scope by typing 
global VARIABLENAME

pp72-73 Try/Except
div42.py example
named error messages, i.e. ValueError?

numberGuess.py

13 Lists
pp79-87 Lists
list is surrounded by [], separated by commas
access individuals by ListName[indexnumber]

lists can hold lists. the simple index of that number will return the whole sub list, but LIST[0][3] returns the fourth item inside the list at the first item of the main list.
LIST[-1] is the last item of the list

Slices- LIST[0,3] (includes first item, excludes second one)
can also LIST[:3] from beginning to third item,
or LIST[8:] from ninth item to end.

can concatenate both strings and normal lists
[a,b,c]+[x,y,z] returns [a,b,c,x,y,z]
[a,b,c]*2 returns [a,b,c,a,b,c]

can make values into lists:
list('hello') returns
['h','e','l','l','o']

'h' in ['h','e','l','l','o'] returns true 
'h' not in ['h','e','l','l','o'] returns false


14 pp88-96?

range(4) is a 'list-like object', technically sequences

list(range(4)) is needed to make it a proper list
use range(0,100,5) to count by 5s

spam - range(0,100,5)
for i in range(len(spam)) will index well for both position and data at position

multiple assignment
size, color, disposition - 'skinny', 'black', 'quiet'

Swap Operations
a,b = b,a  <-switches the values at those variables

Augmented assignment (see table 4-1)
spmam +=1

Lesson 15 Methods pp89-92
spam = ['bob', 'tom', 'harry', 'jamie']
spam.index('bob') returns number, which is bob's position
.index() will return first instance with multiple cases, and an exception for non-present values

methods, like .index(), are called on data, not independently like functions

spam.append('ashe') puts new value at end
spam.insert(3,'will') bumps current item at that position by inserting new one

these don't return anything, it modifies lists 'in place' and changes the existing data.
 call the method, don't assign it (unless to new variable)

spam.remove('tom') will excise/shrink the list, but like .index() only first instance, searches for that value
del spam[0] will remove thing at that location

numbers or strings in a list can be ordered
spam.sort() will alphabetize the list in ASCII-betical format
use spam.sort(key-str.lower) for true alphabetical
.sort(reverse=True) will do it backwards. reverse is a keyword
.sort() doesn't work on mixed string/number lists

pp 96-103
Assignment & Reference
Assigning one variable to the value of another creates a reference/link to a data's ID. This applies to all mutable values, like lists or sets. Strings and tuples are counter examples (being immutable).

If you have a variable declared independently and a function acts on it thru reference, the change can stick around, even if the function's scope is completely gone.

One reason for doing this: references are computationally cheap to pass around, even if they eventually are working on a large dataset. This way you're not working on the dataset every time the reference is invoked.

copy.deepcopy(xxx) = creates a separate copy in memory of xxx

Line Continuation - open pairs of [], (), or {} will allow line breaks in code that ignore indentation, as will \ (<---backslash)

more detail youtu.be/_AEJHKGk9ns

pp104-112 Dictionary Data Type
index for a dict is a key, connects to a value, called key-value pairs ['a':'ahhh', 'b':'buuuh']
- not ordered, can compare 2 dicts of same key-value pairs, won't matter what order, Python will see they are the same.
- the variable and the list for dicts are mutable, but ?pairs aren't?

use list(thing.keys()) to get an actual list, thing.keys() and thing.items() return objects that hold all the values being returned

.......

pp112-118 Data Structures







Running From CMD - Appendix B
start your programs with a 'shebang' 
#! python3 for windows

batch file/shell script
.bat for windows

@xxx calls program xxx
use " " to surround file trees with spaces
" %*" pipes the extra command line input to the preceding file call

sys.argv = the list strings that are input on the command line, when program called

Lesson 22
Regular Expressions
import re
use re.compile(r'\b\s\f\s\d') to create a regex object
use objName.search(longstringthing) or .findall() to use the regex and .group() to see the found matches

151-154 More RegEx Lesson 24
parenthesis mark out groups
so phone number is \d\d\d-\d\d\d-\d\d\d\d
and so is (\d\d\d)-(\d\d\d-\d\d\d\d)
but now objName.group(1) returns just the area code
finding actual parens is \( and \) (escaped with a slash)
.group(0) is total match

pipes | --- use (x|y|xy) to match for x,y, or xy

Lesson 25 pp154-157
Matching by number of repetitions
re.compile(r'Bat(wo)?man') allows search for Batman or or Batwoman, ? means preceding group found 1 or 0 times.
use \? to look for actual ? marks
re.compile(r'Bat(wo)*man') means look for Batman or Batwoman, or Batwowowowowoman - it's any number of times
re.compile(r'Bat(wo)+man') means look for at least, but maybe more than, once

re.compile(r'(\d\d\d-)?\d\d\d-\d\d\d\d') allows area code , doesn't need to be there

re.compile(r'(Ha){3}') matches HaHaHa but not HaHa or HaHaHaHa- use (group){number} for exact repetitions match


re.compile(r'(Ha){3,5}') - matches 3,4,5 reps. works like slicing where {3,} is '3 or more' {,5} is 'up to five'
-this will try to match the LARGEST chunk that fulfills, ie HaHaHaHaHa will be returned, no HaHaHa. called "greedy matching"

re.compile(r'(Ha){3,5}?') - note ? placement, will return 'first'/nongreedy item

Lesson 26/ find all in regex

.findall() vs .search()- the latter returns objects, the findall() returns strings for matches with 1 or zero groups, or tuples of strings for matches with 2 or more groups.

table 7-1
\d  = characters 0-9

\D = all NON NUMERIC characters

\w = like \d + \D + _ (underscore)

\W = anything NOT a letter, number or _

\s = any space/tab/newline character

\S = anything NOT space/tab/newline

re.compile(r'\d+\s\w+') searches for 'number(s)'+'space'+'letter(s)', ie '265 days'

r'[aeiouAEIOU]' searches for ANY vowel.
r'[aeiouAEIOU](2)' searches for DOUBLES, like ee or AA
r'[^aeiouAEIOU]' searches for any character NOT a vowel.
-this last one is called a Negative Character class and will also return all the punctuation

159-163
Lesson 27
Regex 
r'^Hello' is beginning of string
r'Hello$' is last chars of string
r'^Hello$' means exact match here, but r'^\d+$' will return a match that has any number of digits, but only digits

. can stand in for 'any char except [newline]' similar to * in search engines
r'.at' 

r'.*' is anything. if there are chars in  your object

re.compile(r'First Name: (.*) Last Name: (.*)') will return for these fields/answers in a form's text. .findall() will return just the names

use r'.*?' for a nongreedy version

re.compile(r'.*', re.DOTALL) makes the dot include [newline], literally everything is now a match
re.compile(r'.*', re.IGNORECASE or re.I) will ignore capitals vs lowercase 


Lesson 28 pp163-165
Regex .sub()

REGOBJECT.sub('NEWTHING', 'seach string') replaces matches with NEWTHING

REGOBJECT.sub('searched for \1', 'seach string') will replace every instance of .group(1) with 'searched for [whatever 1 is]'

re.VERBOSE -ignores new lines and whitespace, allows # for comments
re.compile(r'''
First Name:   #search for this exactly
(.*) #take whatever is here for Group 1
Last Name: #search for this exactly
(.*) #take whatever is here for Group 2
''', re.VERBOSE)

combine options ---- , re.DOTALL | re.I | re.

TEST REGEX HERE: http://www.regexpal.com/

Lesson 30 File path Abs vs Relative
Each file has a NAME and a FILEPATH
Root is C:\ on Win or / in *nix (note different separators)
'c:\\spam\\eggs.png'<- escape slashes in CMD
or use r'c:\spam\eggs.png' for raw string

import os
os.path.join('rootfolder','nextsubfolder','lastfolder','file.ext')

os.getcwd() <get current working dir
os.chdir('filepath') <set current working dir

Relative Dirs (at C:\bacon)
.\ = this folder
..\ = immediate parent dir
..\eggs = the folder eggs, which is in the same parent folder as folder bacon
..spam.txt = file spam, which is in the same parent folder as bacon

os.path.abspath('spam.txt') gives path between root and spam.txt
os.path.abspath('filepath') returns true if that address starts with root.
os.path.relpath('filepath1', 'filepath2') gives relative filepath of 1 if you're starting in 2

os.path.dirname('filepath') <--before last slash
os.path.basename('filepath') <-- after last slash
os.path.exists('filepath') returns true for an actual file/path
os.path.isdir()
os.path.isfile()

os.path.getsize() works on files
os.path.listdir() returns strings of Dir Names inside filepath

os.makedirs('relfilepath'|'longabsfilepath\newdir\othernewdir')

Lesson 31 pp181-185
Read/Write Plaintext files (ie .txt)

Binaries (anything not plaintext) are anything with a specific extension, should probably encode/decode these with modules/libraries

blahblah = open('filepath.txt') - opens connection (readonly) to file
open('filepath.txt', 'w') - write mode [can overwrite!]
open('filepath.txt', 'a') - append, just adds info
both of these options will create a file if it's not there


blahblah.read() returns contents of file, but should be saved, so the file is only opened once
blahblah.close()  - clean up
blahblah.readlines()

blahblah.write("Hello there") = returns bites of info written to file. also, note it doesn't include new line so use "Hello there\n"

SHELVE MODULE - binary 'shelf files'
import shelve
bob = shelve.open('mydata')
creates bob.db or bob.bak bob.dat bob.dir, which aren't easily readable
bob['cats']= ['and','butt','organ','elemental']

shelf file objects
bob.keys() returns ['cats']
bob.values() returns ['and','butt','organ','elemental']

Lesson 32
import shutil
shutil.copy("filepath.txt","filepath\dir") - moves .txt to dir

copy/rename by appending new file name after dir, "filepath\dir\newfile.txt"

shutil.copytree('original dir', 'new dir')
shutil.move("originalfile", "newpath\dir\dir2") - there is no copy of the original in our CWD
- use .move() to rename a file, by putting it into the same folder with a new name

Lesson 33 - Deleting files pp200-202
os.unlink("filename.txt") permanently deletes
os.rmdir('folderpathname') - remove EMPTY directory
shutil.rmtree('folderpathname') - deletes folder WITH contents

DRY RUNS - # out any code that would execute but print() those results instead

pip install send2trash
import send2trash
send2trash.send2trash('file.txt') - sends it to Recycle folder vs immediate permanent deletion

Lesson 34 Walking a File Tree
os.walk('starting/topfolder') returns an object with three parts - folderName, subFolders, fileNamestringList

for folderName, subFolders, filenames in os.walk(bob):
	print('The folder is '+folderName)
	print('Containing '+'\n'.join(subFolders))
	print('Containing '+ '\n'.join(filenames))


to try tonight-- watch the excel bits, watch the html bits
try to assemble a list of warlock spells in an excel sheet

Less 35 p215
Debugging

Raising an Exception (example: divide by zero). Normally handled by Try/Except

raise Exception('This is an error message.')

import traceback
traceback.format_exc()  <--- the sort of error logging you get on your terminal window, hide under an except block

Assertion - 
assert [condition], 'Error message'
works like a silent check, until the condition is False
meant to kill a program in an error state from a programming error. This is a sanity check, meant for 'should never happen' problems

use Exception for user errors

Lesson 36 Logging
import logging

place this early on--
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s -%(levelname)s - %(messages)s')
#do it with a log file
logging.basicConfig(filename='progLog.txt', level=logging.DEBUG, format='%(asctime)s -%(levelname)s - %(messages)s')
logging.debug('Message goes here')
logging.debug('Message about %s gives detail %s' % (var1, var2))

logging.disable(logging.CRITICAL) - disables all the messages
Log Levels - 
debug(lowest)
info
warning
error
critical(highest)

Lesson 37 225-231 Using the Debugger
https://www.udemy.com/automate/learn/v4/t/lecture/3470588
in the IDLE click on Debug > Debugger, select Stack, Locals, Source, and Globals

__variable__ are 'dunder' variables (double underscore)

Go button - just runs program
Step (into) - follows execution chain, jumping to referred points. If you accidentally Step Into a basic Python function, it'll pull up a new file/window. Just hit Step Out and close the new window
(Step) Over - move through program line by line, executing, returning results
(Step) Out - moves to container of current function
Quit - just terminates the program being run

Breakpoint - a place in a program where Debugger must pause
in IDLE - right click on line and "Set Breakpoint", will highlight in yellow. Program will run as normal until reaching the breakpoint

Lesson 38 Webbrowser module
import webbrowser, sys
webbrowser.open('https://www.address.com') - pulls up default browser with that address



Lesson 39
Websurfing - Requests
requests.readthedocs.org - good for plain, exposed text/files, not for loggin in.
pip install requests

import requests
res = requests.get('http://automatetheboringstuff.com/files/rj.txt')

res.status_code returns a number: 200 is good, vs 404
res.text is all the full text of the file
res.raise_for_status() returns something for error, succeeds silently, lets you know if its bad download.

open('filename',"wb") <---write binary, so that unicode is maintained. see also bit.ly/unipain

playFile= open('Romeo&Juliet.txt', 'wb')
for chunk in res.iter_content(100000): #takes chunks in 100k byte/bites
	playFile.write(chunk)
playFile.close()

Lesson 40 pp240-48
Webscraping/Parsing HTML
ctrl+u = view source
right click > inspect element

beautiful soup
import bs4, requests
res = requests.get(URLHERE)

soup= bs4.BeautifulSoup(res.text, 'html.parser')
elems = soup.select(CSSSELECTOR)
#returns a list of elements that meet selctor criteria

Lesson41 p256-261
Controling Webpages with Selenium & Firefox

from selenium import webdriver
browser = webdriver.Firefox()
browswer.get('URL')
elem =browser.find_element_by_css_selector('selectorhere')
#there are many different find methods in selenium

elem.click() #clicks on selected thing

elem.send_keys('texthere') #allows text input
elem.submit() #automagically completes a submit statement, no clicking required

browser.back() #.forward()
#also .refresh() and .quit()


Lesson42/43 - EXCEL
import openpyxl
bob = openpyxl.load_workbook('filename.xlsx')

workbook.get_sheet_names() - returns all sheet titles
sheet1=workbook.get_sheet_by_name('Sheet1')

equivalent calls follow this
currentCell = sheet1['C1']
currentCell = sheet1.cell(row=1, column=3) 
#counting starts @1!, not zero
#these both return a Cell Object.
# use cell.value to get what's inside the cell

--------

Lesson 46 Email
SMTP - simple mail transfer protocol

import smtplib
conn = smtplib.SMTP('smtp.gmail.com', 587) #587 is a default port

conn.ehlo() #starts connection
#returns number response, like 250 or 404, followed by a bytes object

conn.starttls()#encryption, usually required
con.login('address@server.com', 'password')
#google requires an 'app specific password', look it up

conn.sendmail('fromaddress', 'toaddress', 'Subject: THE THING WE TALK ABOUT\n\nDear recepient, this is a message\n\n-Nick')
#should return blank dictionary, anything inside is a failed send of that object

conn.quit() #disconnects from server

Lesson 47 - Checking Email
IMAP - internet meassage access protocl

